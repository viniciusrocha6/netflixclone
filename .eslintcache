[{"D:\\lab\\netflixclone\\src\\index.js":"1","D:\\lab\\netflixclone\\src\\App.js":"2","D:\\lab\\netflixclone\\src\\Tmdb.js":"3","D:\\lab\\netflixclone\\src\\components\\Header\\index.js":"4","D:\\lab\\netflixclone\\src\\components\\FeatureMovie\\index.js":"5","D:\\lab\\netflixclone\\src\\components\\MovieRow\\index.js":"6"},{"size":196,"mtime":1610492282584,"results":"7","hashOfConfig":"8"},{"size":2093,"mtime":1610906862157,"results":"9","hashOfConfig":"8"},{"size":2608,"mtime":1610579660789,"results":"10","hashOfConfig":"8"},{"size":656,"mtime":1610833690108,"results":"11","hashOfConfig":"8"},{"size":1807,"mtime":1610907536493,"results":"12","hashOfConfig":"8"},{"size":1793,"mtime":1610837023426,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"uy1ohh",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"D:\\lab\\netflixclone\\src\\index.js",[],["30","31"],"D:\\lab\\netflixclone\\src\\App.js",["32"],"D:\\lab\\netflixclone\\src\\Tmdb.js",["33"],"const API_KEY = '19af057608c3fdd5a1df26dcc60a1c24';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romence',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ]\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if (movieId) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                default :\r\n                    info = null;\r\n                break;\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n}","D:\\lab\\netflixclone\\src\\components\\Header\\index.js",["34"],"import React from 'react';\r\nimport './style.css';\r\n\r\nexport default ({ black }) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-5.png\" alt=\"netflix\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"user\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n\r\n}","D:\\lab\\netflixclone\\src\\components\\FeatureMovie\\index.js",["35"],"D:\\lab\\netflixclone\\src\\components\\MovieRow\\index.js",["36"],"import React, { useState } from 'react';\r\nimport './style.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({ title, items }) => {\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    const handlerLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if (x > 0) {\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handlerRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listW = items.results.length * 150\r\n\r\n        if ((window.innerWidth - listW) > x) {\r\n            x = (window.innerWidth - listW) - 60;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handlerLeftArrow}>\r\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n            <div className=\"movieRow--right\">\r\n                <NavigateNextIcon style={{ fontSize: 50 }} onClick={handlerRightArrow} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":8,"column":1,"nodeType":"43","endLine":73,"endColumn":2},{"ruleId":"41","severity":1,"message":"44","line":10,"column":1,"nodeType":"43","endLine":73,"endColumn":2},{"ruleId":"41","severity":1,"message":"42","line":4,"column":1,"nodeType":"43","endLine":20,"endColumn":2},{"ruleId":"41","severity":1,"message":"42","line":4,"column":1,"nodeType":"43","endLine":44,"endColumn":2},{"ruleId":"41","severity":1,"message":"42","line":6,"column":1,"nodeType":"43","endLine":50,"endColumn":2},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]